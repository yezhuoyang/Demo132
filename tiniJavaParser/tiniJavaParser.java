/* Generated By:JavaCC: Do not edit this line. tiniJavaParser.java */
package tiniJavaParser;

import syntaxtree.*;
import java.util.Vector;


public class tiniJavaParser implements tiniJavaParserConstants {
   public static void main(String[] args)
   {
      try
      {
         tiniJavaParser parser = new tiniJavaParser(System.in);
         parser.S();
         System.out.println("Parse successful!");
      }
      catch (Throwable e)
      {
         e.printStackTrace();
      }
   }

  final public S S() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   L n4;
   NodeToken n5;
   Token n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   E n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeSequence n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   E n22;
   NodeToken n23;
   Token n24;
   S n25;
   NodeToken n26;
   Token n27;
   S n28;
   NodeSequence n29;
   NodeToken n30;
   Token n31;
   NodeToken n32;
   Token n33;
   E n34;
   NodeToken n35;
   Token n36;
   S n37;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
           n1 = new NodeSequence(3);
      n3 = jj_consume_token(LBRACE);
                       n2 = JTBToolkit.makeNodeToken(n3);
           n1.addNode(n2);
      n4 = L();
           n1.addNode(n4);
      n6 = jj_consume_token(RBRACE);
                       n5 = JTBToolkit.makeNodeToken(n6);
           n1.addNode(n5);
           n0 = new NodeChoice(n1, 0);
      break;
    case SYSTEM_OUT_PRINTLN:
           n7 = new NodeSequence(5);
      n9 = jj_consume_token(SYSTEM_OUT_PRINTLN);
                                   n8 = JTBToolkit.makeNodeToken(n9);
           n7.addNode(n8);
      n11 = jj_consume_token(LPAREN);
                        n10 = JTBToolkit.makeNodeToken(n11);
           n7.addNode(n10);
      n12 = E();
           n7.addNode(n12);
      n14 = jj_consume_token(RPAREN);
                        n13 = JTBToolkit.makeNodeToken(n14);
           n7.addNode(n13);
      n16 = jj_consume_token(SEMICOLON);
                           n15 = JTBToolkit.makeNodeToken(n16);
           n7.addNode(n15);
           n0 = new NodeChoice(n7, 1);
      break;
    case IF:
           n17 = new NodeSequence(7);
      n19 = jj_consume_token(IF);
                    n18 = JTBToolkit.makeNodeToken(n19);
           n17.addNode(n18);
      n21 = jj_consume_token(LPAREN);
                        n20 = JTBToolkit.makeNodeToken(n21);
           n17.addNode(n20);
      n22 = E();
           n17.addNode(n22);
      n24 = jj_consume_token(RPAREN);
                        n23 = JTBToolkit.makeNodeToken(n24);
           n17.addNode(n23);
      n25 = S();
           n17.addNode(n25);
      n27 = jj_consume_token(ELSE);
                      n26 = JTBToolkit.makeNodeToken(n27);
           n17.addNode(n26);
      n28 = S();
           n17.addNode(n28);
           n0 = new NodeChoice(n17, 2);
      break;
    case WHILE:
           n29 = new NodeSequence(5);
      n31 = jj_consume_token(WHILE);
                       n30 = JTBToolkit.makeNodeToken(n31);
           n29.addNode(n30);
      n33 = jj_consume_token(LPAREN);
                        n32 = JTBToolkit.makeNodeToken(n33);
           n29.addNode(n32);
      n34 = E();
           n29.addNode(n34);
      n36 = jj_consume_token(RPAREN);
                        n35 = JTBToolkit.makeNodeToken(n36);
           n29.addNode(n35);
      n37 = S();
           n29.addNode(n37);
           n0 = new NodeChoice(n29, 3);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new S(n0);}
    throw new Error("Missing return statement in function");
  }

  final public L L() throws ParseException {
   NodeListOptional n0 = new NodeListOptional();
   S n1;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
      case IF:
      case WHILE:
      case SYSTEM_OUT_PRINTLN:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      n1 = S();
        n0.addNode(n1);
    }
     n0.nodes.trimToSize();
     {if (true) return new L(n0);}
    throw new Error("Missing return statement in function");
  }

  final public E E() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   E n8;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      n2 = jj_consume_token(TRUE);
                  n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case FALSE:
      n4 = jj_consume_token(FALSE);
                   n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case NOT:
        n5 = new NodeSequence(2);
      n7 = jj_consume_token(NOT);
                 n6 = JTBToolkit.makeNodeToken(n7);
        n5.addNode(n6);
      n8 = E();
        n5.addNode(n8);
        n0 = new NodeChoice(n5, 2);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new E(n0);}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public tiniJavaParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[3];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1a020,0x1a020,0x1c00,};
   }

  /** Constructor with InputStream. */
  public tiniJavaParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public tiniJavaParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new tiniJavaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public tiniJavaParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new tiniJavaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public tiniJavaParser(tiniJavaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(tiniJavaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[17];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 3; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 17; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}
