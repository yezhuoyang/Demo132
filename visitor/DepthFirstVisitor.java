//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class DepthFirstVisitor implements Visitor {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public void visit(NodeList n) {
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); )
         e.nextElement().accept(this);
   }

   public void visit(NodeListOptional n) {
      if ( n.present() )
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); )
            e.nextElement().accept(this);
   }

   public void visit(NodeOptional n) {
      if ( n.present() )
         n.node.accept(this);
   }

   public void visit(NodeSequence n) {
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); )
         e.nextElement().accept(this);
   }

   public void visit(NodeToken n) { }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> ( <LBRACE> L() <RBRACE> | <SYSTEM_OUT_PRINTLN> <LPAREN> E() <RPAREN> <SEMICOLON> | <IF> <LPAREN> E() <RPAREN> S() <ELSE> S() | <WHILE> <LPAREN> E() <RPAREN> S() )
    */
   public void visit(S n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> ( S() )*
    */
   public void visit(L n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <TRUE>
    *       | <FALSE>
    *       | <NOT> E()
    */
   public void visit(E n) {
      n.f0.accept(this);
   }

}
